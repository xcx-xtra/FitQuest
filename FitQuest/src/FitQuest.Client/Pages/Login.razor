@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITokenService TokenService
@inject HttpClient Http

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="loginModel.Username" placeholder="Username" />
    <InputText @bind-Value="loginModel.Password" placeholder="Password" type="password" />

    <button type="submit">Login</button>
</EditForm>

@code {
    LoginDto loginModel = new();

    async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            Console.WriteLine("Username and password cannot be empty.");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (json?.token is not null)
                {
                    await TokenService.SetTokenAsync(json.token);

                    var identity = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, loginModel.Username!) }, "jwt");
                    var userPrincipal = new ClaimsPrincipal(identity);
                    var authState = new AuthenticationState(userPrincipal);
                    ((CustomAuthProvider)AuthenticationStateProvider).NotifyAuthChanged(authState);
                    Nav.NavigateTo("/dashboard");
                }
                else
                {
                    Console.WriteLine("Token not found in response.");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Login failed: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }

    public class LoginDto
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
    public class LoginResponse
    {
        public string? token { get; set; }
    }
}
